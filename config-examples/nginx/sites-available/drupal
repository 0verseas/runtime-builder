##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	server_name _;

	include letsencrypt.conf;

	# Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
	location / {
		return 301 https://$server_name$request_uri;
	}
}

server {
	# SSL configuration
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	ssl_certificate     	/path/to/fullchain.pem;
	ssl_certificate_key 	/path/to/privkey.pem;
	ssl_session_timeout	1d;
	ssl_session_cache	shared:SSL:50m;
	ssl_session_tickets	off;

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	ssl_dhparam		/path/to/dhparam.pem;

	ssl_protocols		TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers		'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
	ssl_prefer_server_ciphers	on;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	add_header Strict-Transport-Security	max-age=15768000;

	# OCSP Stapling ---
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling		on;
	ssl_stapling_verify	on;

	## verify chain of trust of OCSP response using Root CA and Intermediate certs
	ssl_trusted_certificate	/path/to/chain.pem;

    	resolver 101.101.101.101 8.8.8.8 1.1.1.1;

	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root _;

	# Add index.php to the list if you are using PHP
	index indx.php index.html index.htm index.nginx-debian.html;

	server_name _;

	# location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
	# }

	location = /favicon.ico {
		log_not_found off;
		access_log off;
	}

	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}

	location ~ \..*/.*\.php$ {
		return 403;
	}

	location ~ ^/sites/.*/private/ {
		return 403;
	}

	location ~* ^/.well-known/ {
		allow all;
	}

	location ~ (^|/)\. {
		return 403;
	}

	location / {
		# try_files $uri @rewrite; # For Drupal <= 6
		try_files $uri /index.php?$query_string; # For Drupal >= 7
	}

	location @rewrite {
		rewrite ^/(.*)$ /index.php?q=$1;
	}

	# Don't allow direct access to PHP files in the vendor directory.
	location ~ /vendor/.*\.php$ {
		deny all;
		return 404;
	}

	# In Drupal 8, we must also match new paths where the '.php' appears in
	# the middle, such as update.php/selection. The rule we use is strict,
	# and only allows this pattern with the update.php front controller.
	# This allows legacy path aliases in the form of
	# blog/index.php/legacy-path to continue to route to Drupal nodes. If
	# you do not have any paths like that, then you might prefer to use a
	# laxer rule, such as:
	#   location ~ \.php(/|$) {
	# The laxer rule will continue to work if Drupal uses this new URL
	# pattern with front controllers other than update.php in a future
	# release.
	location ~ '\.php$|^/update.php' {
		fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
		fastcgi_read_timeout 300;
		# Security note: If you're running a version of PHP older than the
		# latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
		# See http://serverfault.com/q/627903/94922 for details.
		include fastcgi_params;
		# Block httpoxy attacks. See https://httpoxy.org/.
		fastcgi_param HTTP_PROXY "";
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;
		fastcgi_intercept_errors on;
		# PHP 5 socket location.
		#fastcgi_pass unix:/var/run/php5-fpm.sock;
		# PHP 7 socket location.
		fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
	}

	# Fighting with Styles? This little gem is amazing.
	# location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
	location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
		try_files $uri @rewrite;
	}

	# Handle private files through Drupal.
	location ~ ^/system/files/ { # For Drupal >= 7
		try_files $uri /index.php?$query_string;
	}

	location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
		expires max;
		log_not_found off;
	}
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
